[tool.poetry]
# These fields are not used by Apify, fill configs in .actor/ instead
authors = ["Vlada Dusek <v.dusek96@gmail.com>"]
description = ""
name = "beautifulsoup-scraper"
readme = "README.md"
version = "1.0.0"

[tool.poetry.dependencies]
apify = "^1.2.0"
beautifulsoup4 = "^4.12.2"
html5lib = "^1.1"
httpx = "^0.25.1"
lxml = "^4.9.3"
python = "^3.11"
types-beautifulsoup4 = "^4.12.0.7"

[tool.poetry.group.dev.dependencies]
mypy = "^1.7.0"
pre-commit = "^3.5.0"
pytest = "^7.4.3"
ruff = "^0.1.5"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.isort]
include_trailing_comma = true
known_first_party = ["apify", "apify_client", "apify_shared"]
line_length = 120
multi_line_output = 3
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
use_parentheses = true

[tool.mypy]
check_untyped_defs = true
color_output = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
error_summary = true
files = ["src"]                    # Todo: add "tests"
ignore_missing_imports = true
no_implicit_optional = true
pretty = true
python_version = 3.11
show_absolute_path = false
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pytest]
asyncio_mode = "auto"
python_files = "test_*.py"
testpaths = "tests"
timeout = 1200
include_trailing_comma = true

[tool.ruff]
line-length = 120
select = ["ALL"]
ignore = [
    "BLE001",  # Do not catch blind exception
    "COM812",  # This rule may cause conflicts when used with the formatter
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "EM",      # flake8-errmsg
    "ISC001",  # This rule may cause conflicts when used with the formatter
    "FIX",     # flake8-fixme
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PLR0913", # Too many arguments in function definition
    "PTH123",  # `open()` should be replaced by `Path.open()`
    "S102",    # Use of `exec` detected
    "S105",    # Possible hardcoded password assigned to
    "TRY003",  # Avoid specifying long messages outside the exception class
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = [
    "F401", # Unused imports
]
"**/{scripts}/*" = [
    "D",      # Everything from the pydocstyle
    "INP001", # File {filename} is part of an implicit namespace package, add an __init__.py
    "T20",    # flake8-print
]
"**/{tests}/*" = [
    "D",      # Everything from the pydocstyle
    "INP001", # File {filename} is part of an implicit namespace package, add an __init__.py
    "T20",    # flake8-print
    "S101",   # Use of assert detected
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.isort]
known-first-party = ["apify", "apify_client", "apify_shared"]

[tool.ruff.lint.pydocstyle]
convention = "google"
